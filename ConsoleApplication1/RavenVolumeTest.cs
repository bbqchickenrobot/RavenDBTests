using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using Raven.Client;
using Raven.Client.Document;
using Raven.Client.Connection;
using System.Net;

namespace RavenVolumeTest
{
    class Program
    {
        static void Main(string[] args)
        {
            var input = "";
            do
            {
                var database = "";
                IDocumentStore ds;
                while (!Uri.IsWellFormedUriString(database, UriKind.Absolute))
                {
                    Console.WriteLine("Please enter a valid absolute url for the database");
                    database = Console.ReadLine();
                }
                Console.WriteLine("Enter the DB to test");
                var defaultdb = Console.ReadLine();
                RunDBTest(database, defaultdb);
                Console.WriteLine("Again? Y/N or B to Begin Stuffing the Bird");
                input = Console.ReadLine().ToLower();
                // pressing B will throw in 100,000 documents or run until an error is generated by Raven
                if (input == "b")
                {
                    ds = new DocumentStore { Url = database, DefaultDatabase = defaultdb };
                    ds.Initialize();
                    for (int i = 0; i < 5000; i++)
                        BeginFill(database, defaultdb, i, ds);
                    ds.Dispose();
                }
            } while (input == "y");
        }

        static void BeginFill(string database, string defaultdb, int multiplier, IDocumentStore store)
        {
            IDocumentSession session = store.OpenSession();

            // This call will allow for socket reuse but by itself it can have security issues
            // see http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.unsafeauthenticatedconnectionsharing.aspx
            store.JsonRequestFactory.ConfigureRequest += (sender, eventArgs) => ((HttpWebRequest)eventArgs.Request).UnsafeAuthenticatedConnectionSharing = true;

            // Creating a connectionGroupName will allow sharing of sockets only within a given
            // collection. Normally this should be by user, to prevent unwanted access when
            // impersonation is used.
            SHA1Managed Sha1 = new SHA1Managed();
            Byte[] updHash = Sha1.ComputeHash(Encoding.UTF8.GetBytes("username" + "password" + "domain"));
            String secureGroupName = Encoding.Default.GetString(updHash);
            store.JsonRequestFactory.ConfigureRequest += (sender, eventArgs) => ((HttpWebRequest)eventArgs.Request).ConnectionGroupName = secureGroupName;




            for (int i = 0; i < 20; i++)
            {
                try
                {
                    var insert = new Test()
                    {
                        title = "Title for item number " + (i + (multiplier * 20)).ToString(),
                        text = "Text for item number " + (i + (multiplier * 20)).ToString() + " that will take up more space.",
                        comments = new String[] { "Here is a comment to " + (i + (multiplier * 20)).ToString(), "Here is another comment!" }
                    };
                    // Saving directly after the store to throw the error as quickly as possible
                    // Normally you would only save changes every 20 or so stores.
                    session.Store(insert);
                    session.SaveChanges();
                }
                catch (Exception ex)
                {
                    Console.Write("Error with insert. Error given is:");
                    Console.WriteLine(ex.Message.ToString());
                }
            }

            session.Dispose();
            Console.WriteLine("Saved Changes up to " + ((multiplier * 20) + 19).ToString() + ".");
       }

        static void RunDBTest(string database, string defaultdb)
        {
            var store = new DocumentStore { Url = database, DefaultDatabase = defaultdb };
            store.Initialize();
            IDocumentSession session = store.OpenSession();


            try
            {
                var json = ((ServerClient)store.DatabaseCommands).CreateRequest("GET", "/debug/user-info").ReadResponseJson();

                foreach (var s in json.Values())
                    Console.WriteLine(s.ToString());
            }
            catch (Exception ex)
                {
                    Console.WriteLine("Error trying to get user permissions. Error given is: ");
                    Console.WriteLine(ex.Message);
                }

            session.SaveChanges();
            session.Dispose();
            store.Dispose();
        }
    }

    class Test
    {
        public string title { get; set; }
        public int Id { get; set; }
        public string text { get; set; }
        public string[] comments { get; set; }
    }
}
